<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cliparserAlsoStr" xml:space="preserve">
    <value>también</value>
  </data>
  <data name="cliparserOptArgMissingStr" xml:space="preserve">
    <value>La opción -{0} debe usarse con un argumento.</value>
  </data>
  <data name="cliparserOptMissingStr" xml:space="preserve">
    <value>La opción -{0} no aparece cuando es obligatoria.</value>
  </data>
  <data name="cliparserRequiredStr" xml:space="preserve">
    <value>Obligatorio. </value>
  </data>
  <data name="cliparserSyntaxTplStr" xml:space="preserve">
    <value> Sintaxis: {0} OPCIONES</value>
  </data>
  <data name="parserOptAboutDesc" xml:space="preserve">
    <value>Visualizza il "circa" del programma</value>
  </data>
  <data name="parserOptFileDesc" xml:space="preserve">
    <value>Ruta del archivo a analizar</value>
  </data>
  <data name="parserOptOutputFileDesc" xml:space="preserve">
    <value>Fichero de destino para la conversión. Si se omite, el archivo tendrá el aspecto de [Nombre de archivo de entrada]-Salida[Extensión de archivo de entrada]. Si es igual a "SAME_AS_INPUT" entonces el mismo archivo que la opción -f</value>
  </data>
  <data name="parserOptSilenceLevelDesc" xml:space="preserve">
    <value>Ajusta el número de elementos que se muestran. 0: se muestra todo (como si -s estuviera ausente), 1: sólo líneas de procesamiento, 2: no se muestra nada</value>
  </data>
  <data name="parserOptTargetEncDesc" xml:space="preserve">
    <value>Convierte la codificación del archivo analizado en una codificación de destino: {0}. La conversión sólo es posible si se ha detectado la codificación de origen.</value>
  </data>
  <data name="parserOptTargetEolDesc" xml:space="preserve">
    <value>Convierte el carácter de fin de línea : {0}. La conversión sólo es posible si se ha detectado la codificación de origen.</value>
  </data>
  <data name="parserParseErrorSandPin" xml:space="preserve">
    <value>Error en las opciones de entrada del programa. Las opciones -{0} y -{1} no se pueden utilizar al mismo tiempo.</value>
  </data>
  <data name="parserParseTrtEolNotExistTxt" xml:space="preserve">
    <value>El tipo de carácter de fin de línea {0} no existe. Tipo de posibles caracteres de fin de línea: {1}</value>
  </data>
  <data name="parserParseTrtFileNotFoundTxt" xml:space="preserve">
    <value>El archivo {0} no existe</value>
  </data>
  <data name="parserParseTrtSilenceLvlWrontTxt" xml:space="preserve">
    <value>La opción -s debe ser un número entero de 0 a 2. provee.</value>
  </data>
  <data name="parserPatternedOutputDesc" xml:space="preserve">
    <value>Indica una modelo para visualizar tratamientos. Ej: [IN_ENC] para mostrar la codificación del archivo de entrada. No visualiza la salida clásica</value>
  </data>
  <data name="programMoreHelpOn" xml:space="preserve">
    <value> Más ayuda en http://wolfaryx.fr/?p=3041</value>
  </data>
  <data name="programNoEncodingFound" xml:space="preserve">
    <value> No se detecta codificación</value>
  </data>
  <data name="programShowHeaderAuthor" xml:space="preserve">
    <value> por Aryx - WolfAryx informatique -</value>
  </data>
  <data name="programShowHeaderDisc" xml:space="preserve">
    <value> Detección de codificación basada en el trabajo de AutoIt Consulting :</value>
  </data>
</root>